#ifndef USERINTF_H
#define USERINTF_H

#include "NamedPipe.h"
#include "Command.h"
#include <thread>
#include <mutex>
#include <vector>
#ifdef UserPack_DEBUG_MODE
#include <fstream>
#endif



/*! ------------------------------------------------------------------------------------
 * @brief: Provides UI through named pipes. Creates 2 pipes for reading and writing.
 * -------------------------------------------------------------------------------------
 * */
class UserInterface {
public:
	/*! ------------------------------------------------------------------------------------
	 * @brief: Represents user data fetched from pipe
	 * -------------------------------------------------------------------------------------
	 * */
	struct UserPack {
		/*! ------------------------------------------------------------------------------------
		 * @brief:
		 * -------------------------------------------------------------------------------------
		 * */
		::Command Command;
		uint8_t DeviceID;
		uint32_t TotalSize;
		std::vector <uint8_t> Data;

		/*! ------------------------------------------------------------------------------------
		 * @brief:
		 *
		 * NOTE: 2 <Command + DeviceID> + 3 <TotalSize>
		 * -------------------------------------------------------------------------------------
		 * */
		static const uint8_t DATA_OFFSET = 2 + 3;

		/*! ------------------------------------------------------------------------------------
		 * @brief:
		 * -------------------------------------------------------------------------------------
		 * */
		void ToBytes(std::vector <uint8_t> &buffer) const;

		/*! ------------------------------------------------------------------------------------
		 * @brief:
		 * -------------------------------------------------------------------------------------
		 * */
		void ToStruct(const std::vector <uint8_t> &buffer);

		/*! ------------------------------------------------------------------------------------
		 * @brief:
		 * -------------------------------------------------------------------------------------
		 * */
		void SetData(const std::vector <uint8_t> &buffer);

		/*! ------------------------------------------------------------------------------------
		 * @brief:
		 * -------------------------------------------------------------------------------------
		 * */
		void Reset();

		/*! ------------------------------------------------------------------------------------
		 * @brief:
		 * -------------------------------------------------------------------------------------
		 * */
		UserPack() = default;
		~UserPack() = default;

	#ifdef UserPack_DEBUG_MODE
		/*! ------------------------------------------------------------------------------------
		 * @brief:
		 * -------------------------------------------------------------------------------------
		 * */
		virtual void Print(std::ostream &os) const = 0;
	#endif
	};

	/*! ------------------------------------------------------------------------------------
	 * @brief:
	 * -------------------------------------------------------------------------------------
	 * */
	enum class STATE : uint8_t {
		CLOSED = 0,
		OPENED
	};

	/*! ------------------------------------------------------------------------------------
	 * @brief:
	 * -------------------------------------------------------------------------------------
	 * */
	enum class MODE : uint8_t {
		OPEN_EXISTING = 1,
		CREATE_NEW
	};

	/*! ------------------------------------------------------------------------------------
	 * @brief:
	 * -------------------------------------------------------------------------------------
	 * */
	enum class CONNTYPE : uint8_t {
		DUPLEX = 1,
		SIMPLEX_RD,
		SIMPLEX_WR
	};

	/*! ------------------------------------------------------------------------------------
	 * @brief:
	 * -------------------------------------------------------------------------------------
	 * */
	enum class RESULT {
		ERROR = -1,
		SUCCESS
	};

	/*! ------------------------------------------------------------------------------------
	 * @brief: Sets mode and connection type
	 * -------------------------------------------------------------------------------------
	 * */
	UserInterface(UserInterface::MODE mode, UserInterface::CONNTYPE connectionType);

	/*! ------------------------------------------------------------------------------------
	 * @brief: Calls close
	 * -------------------------------------------------------------------------------------
	 * */
	virtual ~UserInterface();
	/*! ------------------------------------------------------------------------------------
	 * @brief: Reads user data from pipe
	 * -------------------------------------------------------------------------------------
	 * */
	virtual UserInterface::RESULT Read(UserPack &pack);

	/*! ------------------------------------------------------------------------------------
	 * @brief: Writes user data to pipe
	 * -------------------------------------------------------------------------------------
	 * */
	virtual UserInterface::RESULT Write(const UserPack &pack);

	/*! ------------------------------------------------------------------------------------
	 * @brief: Returns false if the pipe was broken, but is ready now.
	 * Checks only rd_pipe (wr_pipe is depended, and isn't checkable): doesn't work
	 * when using DUPLEX::HALF_WR
	 *
	 * NOTE: the method catches calling thread
	 * -------------------------------------------------------------------------------------
	 * */
	bool CheckWorkingCapacity();

	/*! ------------------------------------------------------------------------------------
	 * @brief: Returns current state of UI
	 * -------------------------------------------------------------------------------------
	 * */
	UserInterface::STATE GetState() const;

	/*! ------------------------------------------------------------------------------------
	 * @brief: Initialises pipes depending on the mode and connection type
	 *
	 * NOTE: state must be equals to CLOSED, else - no operations
	 * -------------------------------------------------------------------------------------
	 * */
	virtual void Initialization();

	/*! ------------------------------------------------------------------------------------
	 * @brief: Destroy pipes
	 *
	 * NOTE: state mustn't be equals to CLOSED, else - no operations
	 * -------------------------------------------------------------------------------------
	 * */
	void Close();

	/*! ------------------------------------------------------------------------------------
	 * @brief: flushes receiving buffer
	 * -------------------------------------------------------------------------------------
	 * */
	void ClearRecvdStuff() const;

private:
	/*! ------------------------------------------------------------------------------------
	 * @brief: Interfaces between driver and higher layer
	 * -------------------------------------------------------------------------------------
	 * */
	NamedPipe rd_pipe, wr_pipe;

	/*! ------------------------------------------------------------------------------------
	 * @brief: Mode of UI: open existing pipes or create new
	 * -------------------------------------------------------------------------------------
	 * */
	UserInterface::MODE mode;

	/*! ------------------------------------------------------------------------------------
	 * @brief: State of UI: opened / closed
	 * -------------------------------------------------------------------------------------
	 * */
	UserInterface::STATE state;

	/*! ------------------------------------------------------------------------------------
	 * @brief: Mode of UI: create / open one (read or write) or two (read and write) pipes
	 * -------------------------------------------------------------------------------------
	 * */
	UserInterface::CONNTYPE connectionType;

	/*! ------------------------------------------------------------------------------------
	 * @brief: Calls Close and Initialization
	 * -------------------------------------------------------------------------------------
	 * */
	void ReOpen();

	/*! ------------------------------------------------------------------------------------
	 * @brief: Used by *_thr to open pipes in any order
	 * -------------------------------------------------------------------------------------
	 * */
	std::mutex rd_mutex, wr_mutex;

	/*! ------------------------------------------------------------------------------------
	 * @brief: Threads for initialization of pipes
	 * -------------------------------------------------------------------------------------
	 * */
	std::thread *rd_thr, *wr_thr;

	/*! ------------------------------------------------------------------------------------
	 * @brief: Creates read pipe (opens existing or creates new)
	 * -------------------------------------------------------------------------------------
	 * */
	void rdCreate();

	/*! ------------------------------------------------------------------------------------
	 * @brief: Creates write pipe (opens existing or creates new)
	 * -------------------------------------------------------------------------------------
	 * */
	void wrCreate();

};



#endif
