#ifndef MSGR_H
#define MSGR_H

#include <vector>
#include <memory>
#include "Command.h"
#include "COMPort.h"
#include "CFG.h"
#include "IniFiles.h"
#include "CheckSum.h"
#include "Logger.h"


/*! ------------------------------------------------------------------------------------
 * @brief: Root of S/M messengers. Represents the interface between high level
 * messengers and the radio module handler.
 *
 * NOTE: module interface is placed in the private section. Handlers is implemented
 * -------------------------------------------------------------------------------------
 * */
class Messenger {
public:
	/*! ------------------------------------------------------------------------------------
	 * @brief:
	 * -------------------------------------------------------------------------------------
	 * */
	struct UserPack {
		/*! ------------------------------------------------------------------------------------
		 * @brief:
		 * -------------------------------------------------------------------------------------
		 * */
		enum class PackType : uint8_t {
			Empty,
			Command,
			Data
		};

		uint8_t DeviceID;
		std::vector<uint8_t> Data;
		::Command Command;

		/*! --------------------------------------------------------------------------------
		 * @brief:
		 * ---------------------------------------------------------------------------------
		 * */
		UserPack::PackType GetPackType() const;

		/*! --------------------------------------------------------------------------------
		 * @brief:
		 * ---------------------------------------------------------------------------------
		 * */
		UserPack(UserPack::PackType packType);
		~UserPack();

	private:
		/*! --------------------------------------------------------------------------------
		 * @brief:
		 * ---------------------------------------------------------------------------------
		 * */
		const UserPack::PackType packType;
	};

	/*! ------------------------------------------------------------------------------------
	 * @brief:
	 * -------------------------------------------------------------------------------------
	 * */
	struct Flags {
		enum : uint8_t {
			Config = 0x01, // prev. Syn
			Ack = 0x02,
			Data = 0x04,
			Slave = 0x08, // prev. Direction
			Short = 0x10,
			F_ = 0x20,
			F__ = 0x40,
			Function = 0x80 // prev. Type
		};
		Flags& operator=(uint8_t val) {
			this->_val = val;
			return *this;
		}
		Flags& operator=(Command cmd) {
			this->_val = cmd | Function;
			return *this;
		}
		operator uint8_t() const {
			return this->_val;
		}
		operator Command() const {
			Command cmd;
			cmd = this->_val & ~Function;
			return cmd;
		}
	private:
		uint8_t _val;
	};

	/*! ------------------------------------------------------------------------------------
	 * @brief:
	 * -------------------------------------------------------------------------------------
	 * */
	enum class STATE {
		STOPPED = 0,
		READY
	};

	/*! ------------------------------------------------------------------------------------
	 * @brief:
	 * SYSErr - system error while receiving
	 * FCSErr - frame check sequence error
	 * TIMEOUT - timeout on receiving
	 * SUCCESS - packet is ready to return
	 * -------------------------------------------------------------------------------------
	 * */
	enum class RESULT {
		SYSErr = 0,
		FCSErr,
		TIMEOUT,
		SUCCESS
	};

	/*! ------------------------------------------------------------------------------------
	 * @brief:
	 * -------------------------------------------------------------------------------------
	 * */
	static constexpr double MSGR_DELAY_BIAS = 1.8;

	/*! ------------------------------------------------------------------------------------
	 * @brief: reads config, sets parameters and opens COM port /
	 * reopens config and reopen port
	 * -------------------------------------------------------------------------------------
	 * */
	void Initialization(void);

	/*! ------------------------------------------------------------------------------------
	 * @brief:
	 * -------------------------------------------------------------------------------------
	 * */
	STATE GetState() const;

	/*! ------------------------------------------------------------------------------------
	 * @brief:
	 * -------------------------------------------------------------------------------------
	 * */
	uint8_t GetBroadcastId() const;

	/*! ------------------------------------------------------------------------------------
	 * @brief:
	 * -------------------------------------------------------------------------------------
	 * */
	uint8_t GetDeviceId() const;

	/*! ------------------------------------------------------------------------------------
	 * @brief:
	 * -------------------------------------------------------------------------------------
	 * */
	void Reset();

	/*! ------------------------------------------------------------------------------------
	 * @brief:
	 * -------------------------------------------------------------------------------------
	 * */
	virtual ~Messenger();

	/*! ------------------------------------------------------------------------------------
	 * @brief:
	 * -------------------------------------------------------------------------------------
	 * */
	static Command Convert(const Messenger::Flags &flag);
	static Messenger::Flags Convert(const Command &command);

protected:
	/*! ------------------------------------------------------------------------------------
	 * @brief:
	 * -------------------------------------------------------------------------------------
	 * */
	struct SystemPack {
		/*! ------------------------------------------------------------------------------------
		 * @brief:
		 * -------------------------------------------------------------------------------------
		 * */
		enum class PackType : uint8_t {
			Empty,
			ConfigPack,
			CommandPack,
			DataPack,
			AnswerPack,
			ShortDataPack
		};

		/*! --------------------------------------------------------------------------------
		 * @brief:
		 * ---------------------------------------------------------------------------------
		 * */
		Messenger::Flags Flags;
		uint8_t	TransactionID;

		/*! --------------------------------------------------------------------------------
		 * @brief:
		 * ---------------------------------------------------------------------------------
		 * */
		static const uint8_t MAX_PACK_SIZE = 255;

		/*! --------------------------------------------------------------------------------
		 * @brief:
		 * ---------------------------------------------------------------------------------
		 * */
		SystemPack::PackType GetPackType() const;

		/*! --------------------------------------------------------------------------------
		 * @brief:
		 * ---------------------------------------------------------------------------------
		 * */
		virtual SystemPack* ToBytes(std::vector <uint8_t> &buffer) = 0;
		virtual SystemPack* FromBytes(const std::vector <uint8_t> &buffer) = 0;

		/*! --------------------------------------------------------------------------------
		 * @brief:
		 * ---------------------------------------------------------------------------------
		 * */
		SystemPack(SystemPack::PackType packType);
		virtual ~SystemPack();

	private:
		/*! --------------------------------------------------------------------------------
		 * @brief:
		 * ---------------------------------------------------------------------------------
		 * */
		const SystemPack::PackType packType;
	};

	/*! ------------------------------------------------------------------------------------
	 * @brief:
	 * -------------------------------------------------------------------------------------
	 * */
	struct ConfigPack : public SystemPack {
		uint8_t		Source;
		uint8_t		Destination;
		uint32_t	TotalSize;
		uint8_t		BufferSize;
		uint8_t		TrustPacks;
		uint8_t		FCS;

		/*! --------------------------------------------------------------------------------
		 * @brief:
		 *
		 * NOTE: TotalSize = 3
		 * ---------------------------------------------------------------------------------
		 * */
		static const uint8_t PACK_SIZE = 10;
		static const uint8_t FCS_SIZE = sizeof(FCS);

		/*! --------------------------------------------------------------------------------
		 * @brief:
		 * ---------------------------------------------------------------------------------
		 * */
		ConfigPack* ToBytes(std::vector <uint8_t> &buffer) override;
		ConfigPack* FromBytes(const std::vector <uint8_t> &buffer) override;

		/*! --------------------------------------------------------------------------------
		 * @brief:
		 * ---------------------------------------------------------------------------------
		 * */
		ConfigPack();
		~ConfigPack();
	};

	/*! ------------------------------------------------------------------------------------
	 * @brief:
	 * -------------------------------------------------------------------------------------
	 * */
	struct CommandPack : public SystemPack  {
		uint8_t		Source;
		uint8_t		Destination;
		uint8_t		FCS;

		/*! --------------------------------------------------------------------------------
		 * @brief:
		 * ---------------------------------------------------------------------------------
		 * */
		static const uint8_t PACK_SIZE = 5;
		static const uint8_t FCS_SIZE = sizeof(FCS);

		/*! --------------------------------------------------------------------------------
		 * @brief:
		 * ---------------------------------------------------------------------------------
		 * */
		CommandPack* ToBytes(std::vector <uint8_t> &buffer) override;
		CommandPack* FromBytes(const std::vector <uint8_t> &buffer) override;

		/*! --------------------------------------------------------------------------------
		 * @brief:
		 * ---------------------------------------------------------------------------------
		 * */
		CommandPack();
		~CommandPack();
	};

	/*! ------------------------------------------------------------------------------------
	 * @brief:
	 * -------------------------------------------------------------------------------------
	 * */
	struct DataPack : public SystemPack  {
		uint16_t	Part;
		std::vector <uint8_t>	Data;
		uint16_t	FCS;

		/*! --------------------------------------------------------------------------------
		 * @brief:
		 * ---------------------------------------------------------------------------------
		 * */
		static const uint8_t PACK_SERVICE_SIZE = 6;
		static const uint8_t FCS_SIZE = sizeof(FCS);

		/*! --------------------------------------------------------------------------------
		 * @brief:
		 * ---------------------------------------------------------------------------------
		 * */
		static const uint8_t DATA_OFFSET = 4;

		/*! --------------------------------------------------------------------------------
		 * @brief:
		 * ---------------------------------------------------------------------------------
		 * */
		DataPack* ToBytes(std::vector <uint8_t> &buffer) override;
		DataPack* FromBytes(const std::vector <uint8_t> &buffer) override;

		/*! --------------------------------------------------------------------------------
		 * @brief:
		 * ---------------------------------------------------------------------------------
		 * */
		DataPack();
		DataPack(uint8_t dataSize);
		~DataPack();
	};

	/*! ------------------------------------------------------------------------------------
	 * @brief:
	 * -------------------------------------------------------------------------------------
	 * */
	struct AnswerPack : public SystemPack  {
		uint8_t		Source;
		uint8_t		Destination;
		uint8_t		FCS;

		/*! --------------------------------------------------------------------------------
		 * @brief:
		 * ---------------------------------------------------------------------------------
		 * */
		static const uint8_t PACK_SIZE = 5;
		static const uint8_t FCS_SIZE = sizeof(FCS);

		/*! --------------------------------------------------------------------------------
		 * @brief:
		 * ---------------------------------------------------------------------------------
		 * */
		AnswerPack* ToBytes(std::vector <uint8_t> &buffer) override;
		AnswerPack* FromBytes(const std::vector <uint8_t> &buffer) override;

		/*! --------------------------------------------------------------------------------
		 * @brief:
		 * ---------------------------------------------------------------------------------
		 * */
		AnswerPack();
		~AnswerPack();
	};

	/*! ------------------------------------------------------------------------------------
	 * @brief:
	 * -------------------------------------------------------------------------------------
	 * */
	struct ShortDataPack : public SystemPack  {
		uint8_t		Source;
		uint8_t		Destination;
		uint8_t		DataSize;
		std::vector <uint8_t>	Data;
		uint16_t	FCS;

		/*! --------------------------------------------------------------------------------
		 * @brief:
		 * ---------------------------------------------------------------------------------
		 * */
		static const uint8_t PACK_SERVICE_SIZE = 7;
		static const uint8_t FCS_SIZE = sizeof(FCS);
		static const uint8_t MAX_PACK_SIZE = 255;
		static const uint8_t MAX_DATA_SIZE = MAX_PACK_SIZE - PACK_SERVICE_SIZE;

		/*! --------------------------------------------------------------------------------
		 * @brief:
		 * ---------------------------------------------------------------------------------
		 * */
		static const uint8_t DATA_OFFSET = 5;

		/*! --------------------------------------------------------------------------------
		 * @brief:
		 * ---------------------------------------------------------------------------------
		 * */
		ShortDataPack* ToBytes(std::vector <uint8_t> &buffer) override;
		ShortDataPack* FromBytes(const std::vector <uint8_t> &buffer) override;

		/*! --------------------------------------------------------------------------------
		 * @brief:
		 * ---------------------------------------------------------------------------------
		 * */
		ShortDataPack();
		ShortDataPack(uint8_t dataSize);
		~ShortDataPack();
	};

	/*! ------------------------------------------------------------------------------------
	 * @brief:
	 * -------------------------------------------------------------------------------------
	 * */
	STATE state;

	/*! ------------------------------------------------------------------------------------
	 * @brief: transactions counter
	 * -------------------------------------------------------------------------------------
	 * */
	uint8_t transacID;

	/*! ------------------------------------------------------------------------------------
	 * @brief: number of slaves in the system
	 * -------------------------------------------------------------------------------------
	 * */
	uint8_t nSlaves;

	/*! ------------------------------------------------------------------------------------
	 * @brief:
	 * -------------------------------------------------------------------------------------
	 * */
	uint8_t broadcastID;

	/*! ------------------------------------------------------------------------------------
	 * @brief: delay between responses: delay = ansDelay * slaveID
	 * -------------------------------------------------------------------------------------
	 * */
	uint16_t ansDelay;

	/*! ------------------------------------------------------------------------------------
	 * @brief: delay between requests: delay = dataDelay * masterID
	 * -------------------------------------------------------------------------------------
	 * */
	uint16_t dataDelay;

	/*! ------------------------------------------------------------------------------------
	 * @brief: buffer size in the data message
	 * -------------------------------------------------------------------------------------
	 * */
	uint8_t bufferSize;

	/*! ------------------------------------------------------------------------------------
	 * @brief: number of packs without response to master
	 * -------------------------------------------------------------------------------------
	 * */
	uint8_t trustPacks;

	/*! ------------------------------------------------------------------------------------
	 * @brief: ID of this MasterMessenger
	 * -------------------------------------------------------------------------------------
	 * */
	uint8_t deviceID;

	/*! ------------------------------------------------------------------------------------
	 * @brief: number of repetitions of one of transactions
	 * -------------------------------------------------------------------------------------
	 * */
	uint8_t repeats;

	/*! ------------------------------------------------------------------------------------
	 * @brief: size of expected data in DataPack on receiving
	 * -------------------------------------------------------------------------------------
	 * */
	uint8_t expectedDataSize;

	/*! ------------------------------------------------------------------------------------
	 * @brief: time out used to read data while telemetry is expected
	 * -------------------------------------------------------------------------------------
	 * */
	uint16_t telemetryTO;

	/*! ------------------------------------------------------------------------------------
	 * @brief: time out is used to read data while several devices are being polled
	 * -------------------------------------------------------------------------------------
	 * */
	uint16_t broadcastTO;

	/*! ------------------------------------------------------------------------------------
	 * @brief: time out is used to read data while one device is being polled
	 * -------------------------------------------------------------------------------------
	 * */
	uint16_t unicastTO;

	/*! ------------------------------------------------------------------------------------
	 * @brief:
	 * -------------------------------------------------------------------------------------
	 * */
	Logger *LOG;

	/*! ------------------------------------------------------------------------------------
	 * @brief:
	 * -------------------------------------------------------------------------------------
	 * */
	Messenger(Logger &LOG);

	/*! ------------------------------------------------------------------------------------
	 * @brief: sets parameters for broadcast / unicast / telemetry / any transactions
	 * -------------------------------------------------------------------------------------
	 * */
	void SetBroadcast();
	void SetUnicast();
	void SetTelemetry();
	void SetAnyTO(DWORD time_ms, DWORD chars);

	/*! ------------------------------------------------------------------------------------
	 * @brief: flushes buffer of COM port
	 * -------------------------------------------------------------------------------------
	 * */
	void ClearRecvdStuff() const;

	/*! ------------------------------------------------------------------------------------
	 * @brief:
	 *
	 * return value is result of transmitting operation
	 * -------------------------------------------------------------------------------------
	 * */
	Messenger::RESULT SendPack(std::shared_ptr<Messenger::SystemPack> pack) const;
	Messenger::RESULT SendPack(std::shared_ptr<Messenger::SystemPack> &pack) const;

	/*! ------------------------------------------------------------------------------------
	 * @brief:
	 *
	 * NOTE: need to set expectedDataSize to receive DataPack
	 *
	 * return value is result of receiving operation with FCS checking
	 * -------------------------------------------------------------------------------------
	 * */
	Messenger::RESULT RecvPack(std::shared_ptr<Messenger::SystemPack> &pack) const;

private:
	/*! ------------------------------------------------------------------------------------
	 * @brief: radio module interface
	 * -------------------------------------------------------------------------------------
	 * */
	COMPort *port;

	/*! ------------------------------------------------------------------------------------
	 * @brief:
	 *
	 * NOTE: -(size of flags)
	 * -------------------------------------------------------------------------------------
	 * */
	const uint8_t CmdSz = Messenger::CommandPack::PACK_SIZE - 1;
	const uint8_t AnsSz = Messenger::AnswerPack::PACK_SIZE - 1;
	const uint8_t CfgSz = Messenger::ConfigPack::PACK_SIZE - 1;
	const uint8_t DataSz = Messenger::DataPack::PACK_SERVICE_SIZE -
			Messenger::DataPack::FCS_SIZE - 1;
	const uint8_t ShrtDataSz = Messenger::ShortDataPack::PACK_SERVICE_SIZE -
			Messenger::DataPack::FCS_SIZE - 1;
};

#endif
